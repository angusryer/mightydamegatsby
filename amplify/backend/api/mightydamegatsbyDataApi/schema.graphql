# type Blog @model {
#   id: ID!
#   name: String!
#   posts: [Post] @connection(keyName: "byBlog", fields: ["id"])
# }

# type Post @model @key(name: "byBlog", fields: ["blogID"]) {
#   id: ID!
#   title: String!
#   blogID: ID!
#   blog: Blog @connection(fields: ["blogID"])
#   comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
# }

# type Comment @model @key(name: "byPost", fields: ["postID", "content"]) {
#   id: ID!
#   postID: ID!
#   post: Post @connection(fields: ["postID"])
#   content: String!
# }

type User
  @model
  @auth(rules: [{ allow: groups, groups: ["Admin"] }])
  @key(name: "ByType", fields: ["userType"], queryField: "ByType") {
  id: ID!
  firstName: String
  lastName: String
  displayName: String
  email: String!
  dateRegistered: AWSDateTime
  userType: UserType!
  streetAddressOne: String
  streetAddressTwo: String
  city: String
  provinceState: String
  country: String
  postalZip: String
  phone: String
  subscriber: Boolean!
  dateSubscribed: AWSDateTime
  reviews: Review @connection
  offers: Offer @connection
}

type Offer
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "ByOfferType", fields: ["offerType"], queryField: "ByOfferType") {
  id: ID!
  offerType: OfferType!
  title: String!
  shortDescription: String!
  longDescription: String!
  keywords: [String]!
  categories: [String]!
  price: Float!
  salePrice: Float!
  mainImageUrl: String!
  otherImageUrls: [String]!
  available: Boolean!
  brand: String
  reviews: Review @connection
  users: User @connection
}

type Review
  @model
  @auth(
    rules: [
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  title: String!
  comment: String
  created: AWSDateTime
  rating: Int!
  user: User @connection
}

enum UserType {
  ADMIN
  MEMBER
  PUBLIC
}

enum OfferType {
  PRODUCT
  SERVICE
}
